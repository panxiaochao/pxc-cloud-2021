<?xml version="1.0" encoding="UTF-8"?>
<!-- 志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!--
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <property name="filePath" value="./logs/cloud-gateway"/>
    <property name="consolePattern"
              value="%d{YYYY-MM-dd HH:mm:ss.SSS} %cyan(%-5level) %magenta(${PID:- }) [%thread] %X{tl} %cyan(%logger{50}) - %msg%n"/>
    <property name="patternLayout" value="%d{YYYY-MM-dd HH:mm:ss.SSS} %-5level [%thread] %X{tl} %logger{50} - %msg%n"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>
    <!--单个日志文件最大10M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1-->
    <property name="maxFileSize" value="10MB"/>
    <!--所有的日志文件最大10G，超过就会删除旧的日志-->
    <property name="totalSizeCap" value="10GB"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${consolePattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- INFO -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${filePath}/info.log</file>
        <encoder>
            <pattern>${patternLayout}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 循环政策：基于文件大小和时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${filePath}/info/%d{yyyy-MM-dd}/info-%i.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxHistory}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>INFO</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ERROR -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${filePath}/error.log</file>
        <encoder>
            <pattern>${patternLayout}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 循环政策：基于文件大小和时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${filePath}/error/%d{yyyy-MM-dd}/error-%i.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxHistory}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- Spring日志级别控制  -->
    <logger name="org.springframework" level="warn"/>

    <!-- 控制台日志 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
    </root>

    <!-- 系统操作日志 -->
    <root level="INFO">
        <appender-ref ref="FILE_INFO"/>
        <appender-ref ref="FILE_ERROR"/>
    </root>
</configuration>
